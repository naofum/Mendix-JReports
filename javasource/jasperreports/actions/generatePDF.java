// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jasperreports.actions;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaEnumValue;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive.PrimitiveType;
import com.mendix.webui.CustomJavaAction;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRCsvExporterParameter;
import net.sf.jasperreports.engine.export.JRPdfExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.export.ooxml.JRDocxExporterParameter;
import net.sf.jasperreports.engine.export.ooxml.JRDocxExporter;
import net.sf.jasperreports.engine.export.ooxml.JRPptxExporter;
import net.sf.jasperreports.engine.export.ooxml.JRXlsxExporter;
import jasperreports.proxies.constants.Constants;
import jasperreports.proxies.FileType;

public class generatePDF extends CustomJavaAction<IMendixObject>
{
	private jasperreports.proxies.FileType FileTypeParameter1;
	private java.lang.String Locale;
	private IMendixObject __Form;
	private jasperreports.proxies.JasperForms Form;
	private IMendixObject Parameters;
	private java.util.List<IMendixObject> Records;

	public generatePDF(IContext context, java.lang.String FileTypeParameter1, java.lang.String Locale, IMendixObject Form, IMendixObject Parameters, java.util.List<IMendixObject> Records)
	{
		super(context);
		this.FileTypeParameter1 = FileTypeParameter1 == null ? null : jasperreports.proxies.FileType.valueOf(FileTypeParameter1);
		this.Locale = Locale;
		this.__Form = Form;
		this.Parameters = Parameters;
		this.Records = Records;
	}

	@Override
	public IMendixObject executeAction() throws Exception
	{
		this.Form = __Form == null ? null : jasperreports.proxies.JasperForms.initialize(getContext(), __Form);

		// BEGIN USER CODE
		if (Parameters == null) {
			return null;
		}
		if (Records == null) {
			return null;
		}

		// Locale
		String[] str = Locale.split("_");
		Locale locale = null;
		if (str.length > 2) {
			locale = new Locale(str[0], str[1], str[2]);
		} else if (str.length > 1) {
			locale = new Locale(str[0], str[1]);
		} else if (str.length == 0) {
			locale = new Locale(str[0]);
		}

		InputStream inputStream = null;
		InputStream jasperStream = null;
		ByteArrayOutputStream pdf = null;
		IMendixObject obj = Core.instantiate(getContext(), "JasperReports.GeneratedReports");
		try {

			// Parameters to be passed to JasperReports
			Map<String, Object> parameters = convertToMap(Parameters);

			// Add context to parameters
			parameters.put(CONTEXT, getContext());
			if (locale != null) {
				parameters.put(JRParameter.REPORT_LOCALE, locale);
			}

			// Records to be passed to JasperReports. Convert List of MendixObject to List of Map
			List<Map<String, Object>> records = getFields(Records);

			// JasperReports
			inputStream = Core.getFileDocumentContent(getContext(), __Form);
			JasperPrint jrprint = JasperFillManager.fillReport(inputStream, parameters,
					new JRMapCollectionDataSource((Collection) records));

			// generate PDF
			pdf = new ByteArrayOutputStream();
			if (FileTypeParameter1 == FileType.PDF) {
				JRPdfExporter exporter = new JRPdfExporter();
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jrprint);
				exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, pdf);
				exporter.setParameter(JRPdfExporterParameter.FORCE_LINEBREAK_POLICY, Boolean.TRUE);
				exporter.exportReport();
			} else if (FileTypeParameter1 == FileType.CSV) {
				JRCsvExporter exporter = new JRCsvExporter();
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jrprint);
				exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, pdf);
				exporter.setParameter(JRCsvExporterParameter.FIELD_DELIMITER, ",");
				exporter.exportReport();
			} else if (FileTypeParameter1 == FileType.Docx) {
				JRDocxExporter exporter = new JRDocxExporter();
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jrprint);
				exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, pdf);
				exporter.exportReport();
			} else if (FileTypeParameter1 == FileType.Pptx) {
				JRPptxExporter exporter = new JRPptxExporter();
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jrprint);
				exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, pdf);
				exporter.exportReport();
			} else if (FileTypeParameter1 == FileType.Xlsx) {
				JRXlsxExporter exporter = new JRXlsxExporter();
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jrprint);
				exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, pdf);
				exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
				exporter.exportReport();
			}

			jasperStream = new ByteArrayInputStream(pdf.toByteArray());
			Core.storeFileDocumentContent(getContext(), obj, jasperStream);
		} catch (Exception e) {
			throw e;
		} finally {
			if (inputStream != null) {
				inputStream.close();
			}
			if (jasperStream != null) {
				jasperStream.close();
			}
			if (pdf != null) {
				pdf.close();
			}
		}
		return obj;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "generatePDF";
	}

	// BEGIN EXTRA CODE
	/**
	 * Decimal error array
	 */
	private static final String[] INVALID_VALUES = { "OE-8", "0E-7"};

	/**
	 * Context key
	 */
	private static final String CONTEXT = "context";

	/**
	 * Convert MendixObject to Map
	 *
	 * @param in Input MendixObject
	 * @return parameters map
	 */
	private Map<String, Object> convertToMap(IMendixObject mendixObj) {
		// context to parameters
		Map<String, Object> parameters = new HashMap<String, Object>();
		Collection<? extends IMetaPrimitive> in = mendixObj.getMetaObject().getMetaPrimitives();
		for (IMetaPrimitive p : in) {
			// Attribute type
			PrimitiveType type = p.getType();
			// Attribute name
			String attributeName = p.getName();
			// Attribute value
			Object attributeValue = mendixObj.getValue(getContext(), attributeName);

			// 型によるパラメータ設定
			if (type == PrimitiveType.Enum) {
				for (IMetaEnumValue metaEnumValue : p.getEnumValues()) {
					if (attributeValue != null && metaEnumValue != null && attributeValue.equals(metaEnumValue.getIdentifier())) {
						parameters.put(attributeName, Core.getInternationalizedString(Locale, metaEnumValue.getI18NCaptionKey()));
					}
					break;
				}
			} else if (type == PrimitiveType.DateTime) {
				if (attributeValue != null) {
					parameters.put(attributeName, (java.util.Date)attributeValue);
				}
			} else if (type == PrimitiveType.Decimal) {
				String str = attributeValue.toString();
				BigDecimal big = new BigDecimal(str);
				parameters.put(attributeName, big);
				if ((Arrays.asList(INVALID_VALUES)).contains(String.valueOf(attributeValue))) {
					parameters.put(attributeName, BigDecimal.ZERO);
				}
			} else if (type == PrimitiveType.Integer){
				String objStr = attributeValue.toString();
				parameters.put(attributeName, new Integer(objStr).intValue());

			} else if (type == PrimitiveType.AutoNumber || type == PrimitiveType.Long) {
				parameters.put(attributeName, (java.lang.Long)attributeValue);

			} else if (type == PrimitiveType.Boolean) {
				parameters.put(attributeName, (java.lang.Boolean)attributeValue);

			} else if (type == PrimitiveType.String){
				if (attributeValue == null) {
					attributeValue = "";
				}
				parameters.put(attributeName, attributeValue);
			} else {
				parameters.put(attributeName, attributeValue);
			}

		}
		return parameters;
	}

	/**
	 * Get Fields
	 * Convert List of MendixObject to List of Map
	 * 
	 * @param records List of Input Datas
	 * @return list List as datasource
	 */
	private List<Map<String, Object>> getFields(List<IMendixObject> records) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		for (IMendixObject record : records) {
			Map<String, Object> map = convertToMap(record);
			list.add(map);
		}
		return list;
	}
	// END EXTRA CODE
}
